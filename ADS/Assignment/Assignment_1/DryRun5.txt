/*  Problem 	  
Dry Run & Analyze: Time and Space Complexity 
1.	Dry run the code for n = 4. How many times is * printed? What is the time complexity? 
 void printTriangle(int n) {     for (int i = 0; i < n; i++)          for (int j = 0; j <= i; j++)  
            System.out.print("*"); 
} 
2.	Dry run for n = 8. What’s the number of iterations? Time complexity? 
void printPattern(int n) {     for (int i = 1; i <= n; i *= 2)         for (int j = 0; j < n; j++) 
            System.out.println(i + "," + j); 
} 
3.	Dry run for n = 20. How many recursive calls? What values are printed? 
void recHalf(int n) {     if (n <= 0) return;     System.out.print(n + " ");     recHalf(n / 2); 
} 
 
 
 
4.	Dry run for n = 3. How many total calls are made? What’s the time complexity? 
void fun(int n) {     if (n == 0) return;     fun(n - 1);     fun(n - 1); } 
5.	Dry run for n = 3. How many total iterations? Time complexity? 
void tripleNested(int n) {     for (int i = 0; i < n; i++)         for (int j = 0; j < n; j++)             for (int k = 0; k < n; k++) 
                System.out.println(i + j + k); 
} 
 
 
*/

1. Dry run the code for n = 4. How many times is * printed? What is the time complexity?
void printTriangle(int n) {
    for (int i = 0; i < n; i++)  
        for (int j = 0; j <= i; j++)  
            System.out.print("*");
}

Calculation:
i = 0 → 1
i = 1 → 2
i = 2 → 3
i = 3 → 4
Total * printed = 1 + 2 + 3 + 4 = 10
Time Complexity: O(n²)


2. Dry run for n = 8. What’s the number of iterations? Time complexity?
void printPattern(int n) {
    for (int i = 1; i <= n; i *= 2)  
        for (int j = 0; j < n; j++)  
            System.out.println(i + "," + j);  
}

Calculation:
i = 1 → 8 iterations
i = 2 → 8 iterations
i = 4 → 8 iterations
i = 8 → 8 iterations
Total iterations = 8 × 4 = 32
Time Complexity: O(n log n)


3. Dry run for n = 20. How many recursive calls? What values are printed?
void recHalf(int n) {
    if (n <= 0) return;  
    System.out.print(n + " ");  
    recHalf(n / 2);  
}

Calculation:
n = 20 → prints 20, calls recHalf(10)
n = 10 → prints 10, calls recHalf(5)
n = 5  → prints 5, calls recHalf(2)
n = 2  → prints 2, calls recHalf(1)
n = 1  → prints 1, calls recHalf(0) (base case reached)
Values printed: 20 10 5 2 1
Total recursive calls: 5
Time Complexity: O(log n)


4. Dry run for n = 3. How many total calls are made? What’s the time complexity?
void fun(int n) {
    if (n == 0) return;  
    fun(n - 1);  
    fun(n - 1);  
}

Calculation:
fun(3) → calls fun(2) twice
fun(2) → calls fun(1) twice
fun(1) → calls fun(0) twice
Total calls = 2⁴ - 1 = 15
Time Complexity: O(2ⁿ)


5. Dry run for n = 3. How many total iterations? Time complexity?
void tripleNested(int n) {
    for (int i = 0; i < n; i++)  
        for (int j = 0; j < n; j++)  
            for (int k = 0; k < n; k++)  
                System.out.println(i + j + k);  
}

Calculation:
i = 0 → 3×3 = 9 iterations
i = 1 → 3×3 = 9 iterations
i = 2 → 3×3 = 9 iterations
Total iterations = 3³ = 27
Time Complexity: O(n³)

